import org.apache.commons.io.FileUtils

buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url 'https://maven.aliyun.com/repository/public/' }
    }
    dependencies {
        classpath group: 'commons-io', name: 'commons-io', version: '2.6'
    }
}

plugins {
    id 'java'
}

group = 'org.gradle'
version = '4.3.1'
archivesBaseName = 'gradle-uri'

sourceCompatibility = targetCompatibility = 1.8

repositories {
    jcenter()
    maven { url 'https://maven.aliyun.com/repository/public/' }
    maven { url 'https://repo.gradle.org/gradle/libs-releases-local/' }
}

configurations {
    shade_core_api
    compile.extendsFrom(shade_core_api)
    shade_resources_http
    compile.extendsFrom(shade_resources_http)
}

dependencies {
    compile group: 'org.gradle', name: 'gradle-base-services', version: version
    compile group: 'org.gradle', name: 'gradle-resources', version: version
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.12'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.7'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.4.1'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.10'
    compile group: 'com.google.guava', name: 'guava', version: '17.0'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '1.3.9'

    shade_core_api files('lib/gradle-core-api-' + version + '.jar')
    shade_resources_http files('lib/gradle-resources-http-' + version + '.jar')
}

task core_api(type: Jar) {
    archiveBaseName.set 'gradle-core-api'
    from sourceSets.main.output
    configurations.shade_core_api.copyRecursive().setTransitive(false).each {
        artifact ->
            from(zipTree(artifact).matching {
                exclude '**/api/invocation/Gradle*'
            })
    }
    includeEmptyDirs = false
    exclude '**/http/HttpClientHelper*'
}

task resources_http(type: Jar) {
    archiveBaseName.set 'gradle-resources-http'
    from sourceSets.main.output
    configurations.shade_resources_http.copyRecursive().setTransitive(false).each {
        artifact ->
            from(zipTree(artifact).matching {
                exclude '**/http/HttpClientHelper*'
            })
    }
    includeEmptyDirs = false
    exclude '**/api/invocation/Gradle*'
}

task zip_bin(type: Zip, dependsOn: [core_api, resources_http]) {
    String identify = 'gradle-' + project.version
    String name = identify + '-bin.zip'
    archiveFileName.set 'gradle-uri-' + project.version + '-bin.zip'
    File binFile = cacheFile('https://services.gradle.org/distributions/' + name, 'gradle-dist/' + name)
    from(zipTree(binFile).matching {
        exclude '**/gradle-core-api*.jar', '**/gradle-resources-http*.jar'
    })
    from(core_api.getArchiveFile(), {
        it.into(identify + '/lib/')
    })
    from(resources_http.getArchiveFile(), {
        it.into(identify + '/lib/plugins/')
    })
}

task zip_all(type: Zip) {
    String identify = 'gradle-' + project.version
    String name = identify + '-all.zip'
    archiveFileName.set 'gradle-uri-' + project.version + '-all.zip'
    File binFile = cacheFile('https://services.gradle.org/distributions/' + name, 'gradle-dist/' + name)
    from(zipTree(binFile).matching {
        exclude '**/gradle-core-api*.jar', '**/gradle-resources-http*.jar'
    })
    from(core_api.getArchiveFile(), {
        it.into(identify + '/lib/')
    })
    from(resources_http.getArchiveFile(), {
        it.into(identify + '/lib/plugins/')
    })
}

build {
    dependsOn(core_api, resources_http, zip_bin, zip_all)
}

File cacheFile(String url, String filepath) {
    try {
        URL source = new URL(url)
        File targetFile = new File(gradle.gradleUserHomeDir, 'caches/custom-caches/' + filepath)
        File eTagFile = new File(targetFile.path + ".etag")
        targetFile.mkdirs()

        String sourceETag = source.openConnection().getHeaderField("ETag").replaceAll('"', '')

        if (!targetFile.exists() || !eTagFile.exists() || targetFile.isDirectory() || eTagFile.isDirectory()) {
            targetFile.delete()
            eTagFile.delete()
            println "Cache downloading " + source
            FileUtils.copyURLToFile(source, targetFile)
            FileUtils.writeStringToFile(eTagFile, sourceETag, "UTF-8")
        } else {
            String fileETag = FileUtils.readFileToString(eTagFile, "UTF-8")
            if (sourceETag != fileETag) {
                println "Cache file " + filepath + " is outdated with eTag: " + fileETag + " -> " + sourceETag
                targetFile.delete()
                eTagFile.delete()
                println "Cache downloading " + source
                FileUtils.copyURLToFile(source, targetFile)
                FileUtils.writeStringToFile(eTagFile, sourceETag, "UTF-8")
            } else {
                println "Cache file " + filepath + " is up-to-date with eTag: " + fileETag
            }
        }
        return targetFile
    } catch (Throwable e) {
        e.printStackTrace()
    }
    return null
}
